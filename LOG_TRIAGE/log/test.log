============================= test session starts ==============================
platform linux -- Python 3.9.7, pytest-7.1.2, pluggy-1.0.0
rootdir: /home/data/ST012cana0/users/i77655/MUSTANG/branches/VTOOLS/LOG_TRIAGE
collected 37 items

tests/test_logtriage.py ....FFFF...F.F....F..........EF.....E            [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_stop_loading_sets_flag _________________
file /home/data/ST012cana0/users/i77655/MUSTANG/branches/VTOOLS/LOG_TRIAGE/tests/test_logtriage.py, line 198
  def test_stop_loading_sets_flag(qtbot):
E       fixture 'qtbot' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/data/ST012cana0/users/i77655/MUSTANG/branches/VTOOLS/LOG_TRIAGE/tests/test_logtriage.py:198
___________________ ERROR at setup of test_column_visibility ___________________
file /home/data/ST012cana0/users/i77655/MUSTANG/branches/VTOOLS/LOG_TRIAGE/tests/test_logtriage.py, line 257
  def test_column_visibility(qtbot):
E       fixture 'qtbot' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/data/ST012cana0/users/i77655/MUSTANG/branches/VTOOLS/LOG_TRIAGE/tests/test_logtriage.py:257
=================================== FAILURES ===================================
_______________________ test_parse_count_filter_invalid ________________________

    def test_parse_count_filter_invalid():
>       assert not parse_count_filter(">abc", 10)

tests/test_logtriage.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

expr = '>abc', value = 10

    def parse_count_filter(expr, value):
        try:
            value = int(value)
        except Exception:
            return False
        expr = expr.strip()
        if not expr:
            return True
        if expr.startswith(">="):
            return value >= int(expr[2:])
        elif expr.startswith("<="):
            return value <= int(expr[2:])
        elif expr.startswith(">"):
>           return value > int(expr[1:])
E           ValueError: invalid literal for int() with base 10: 'abc'

logtriage/parsing.py:167: ValueError
____________________ test_group_rows_different_line_numbers ____________________

    def test_group_rows_different_line_numbers():
        row1 = LogRow("1", "tc", "opt", "ERROR", 1, "msg", "msg", "simulate", "file", 10)
        row2 = LogRow("1", "tc", "opt", "ERROR", 1, "msg", "msg", "simulate", "file", 11)
        grouped = group_rows([row1, row2])
>       assert len(grouped) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([LogRow(id='1', testcase='tc', testopt='opt', type='ERROR', count=2, message='msg', orig_message='msg', logtype='simulate', logfilepath='file', linenumber=10)])

tests/test_logtriage.py:71: AssertionError
_______________________ test_load_patterns_invalid_json ________________________

patterns_file = '/tmp/pytest-of-i77655/pytest-11/test_load_patterns_invalid_jso0/bad.json'

    def load_patterns_from_file(patterns_file):
        import json
        patterns = []
        try:
            if patterns_file.lower().endswith('.json'):
                with open(patterns_file, 'r', encoding='utf-8') as f:
>                   data = json.load(f)

logtriage/parsing.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fp = <_io.TextIOWrapper name='/tmp/pytest-of-i77655/pytest-11/test_load_patterns_invalid_jso0/bad.json' mode='r' encoding='utf-8'>
cls = None, object_hook = None, parse_float = None, parse_int = None
parse_constant = None, object_pairs_hook = None, kw = {}

    def load(fp, *, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``fp`` (a ``.read()``-supporting file-like object containing
        a JSON document) to a Python object.
    
        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).
    
        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.  If ``object_hook``
        is also defined, the ``object_pairs_hook`` takes priority.
    
        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.
        """
>       return loads(fp.read(),
            cls=cls, object_hook=object_hook,
            parse_float=parse_float, parse_int=parse_int,
            parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)

/pkg/python-3.9.7/el7/lib/python3.9/json/__init__.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = '{not: valid json}', cls = None, object_hook = None, parse_float = None
parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}

    def loads(s, *, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance
        containing a JSON document) to a Python object.
    
        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).
    
        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.  If ``object_hook``
        is also defined, the ``object_pairs_hook`` takes priority.
    
        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).
    
        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).
    
        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.
    
        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.
        """
        if isinstance(s, str):
            if s.startswith('\ufeff'):
                raise JSONDecodeError("Unexpected UTF-8 BOM (decode using utf-8-sig)",
                                      s, 0)
        else:
            if not isinstance(s, (bytes, bytearray)):
                raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                                f'not {s.__class__.__name__}')
            s = s.decode(detect_encoding(s), 'surrogatepass')
    
        if (cls is None and object_hook is None and
                parse_int is None and parse_float is None and
                parse_constant is None and object_pairs_hook is None and not kw):
>           return _default_decoder.decode(s)

/pkg/python-3.9.7/el7/lib/python3.9/json/__init__.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f36121bb4f0>
s = '{not: valid json}'
_w = <built-in method match of re.Pattern object at 0x7f361222a6f0>

    def decode(self, s, _w=WHITESPACE.match):
        """Return the Python representation of ``s`` (a ``str`` instance
        containing a JSON document).
    
        """
>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())

/pkg/python-3.9.7/el7/lib/python3.9/json/decoder.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f36121bb4f0>
s = '{not: valid json}', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
>           obj, end = self.scan_once(s, idx)
E           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

/pkg/python-3.9.7/el7/lib/python3.9/json/decoder.py:353: JSONDecodeError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-i77655/pytest-11/test_load_patterns_invalid_jso0')

    def test_load_patterns_invalid_json(tmp_path):
        file = tmp_path / "bad.json"
        file.write_text("{not: valid json}")
        with pytest.raises(ValueError):
>           load_patterns_from_file(str(file))

tests/test_logtriage.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns_file = '/tmp/pytest-of-i77655/pytest-11/test_load_patterns_invalid_jso0/bad.json'

    def load_patterns_from_file(patterns_file):
        import json
        patterns = []
        try:
            if patterns_file.lower().endswith('.json'):
                with open(patterns_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Support both list of dicts and list of (type, regex) tuples
                    for entry in data:
                        if isinstance(entry, dict) and 'Type' in entry and 'Regex' in entry:
                            typ = entry['Type']
                            regex = re.compile(entry['Regex'])
                            patterns.append((typ, regex))
                        elif isinstance(entry, (list, tuple)) and len(entry) == 2:
                            typ, regex_str = entry
                            patterns.append((typ, re.compile(regex_str)))
            else:
                logger.error("Unsupported file format: %s", patterns_file)
                raise ValueError("Unsupported file format for regex patterns. Only JSON is supported.")
        except FileNotFoundError:
            logger.error("Regex patterns file not found: %s", patterns_file)
            raise FileNotFoundError(f"Regex patterns file not found: {patterns_file}")
        except json.JSONDecodeError as e:
>           logger.error("Invalid JSON in regex patterns file: %s (%s)", patterns_file, e)
E           NameError: name 'logger' is not defined

logtriage/parsing.py:71: NameError
______________________ test_load_ignore_patterns_non_json ______________________

ignore_file = '/tmp/pytest-of-i77655/pytest-11/test_load_ignore_patterns_non_0/ignore.txt'

    def load_ignore_patterns_from_file(ignore_file):
        import json
        patterns = []
        try:
            if ignore_file.lower().endswith('.json'):
                with open(ignore_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Support both list of dicts and list of strings
                    for entry in data:
                        if isinstance(entry, dict) and 'Regex' in entry:
                            patterns.append(re.compile(entry['Regex']))
                        elif isinstance(entry, str):
                            patterns.append(re.compile(entry))
            else:
>               logger.error("Unsupported file format: %s", ignore_file)
E               NameError: name 'logger' is not defined

logtriage/parsing.py:35: NameError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-i77655/pytest-11/test_load_ignore_patterns_non_0')

    def test_load_ignore_patterns_non_json(tmp_path):
        file = tmp_path / "ignore.txt"
        file.write_text("some pattern")
        with pytest.raises(ValueError):
>           load_ignore_patterns_from_file(str(file))

tests/test_logtriage.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ignore_file = '/tmp/pytest-of-i77655/pytest-11/test_load_ignore_patterns_non_0/ignore.txt'

    def load_ignore_patterns_from_file(ignore_file):
        import json
        patterns = []
        try:
            if ignore_file.lower().endswith('.json'):
                with open(ignore_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Support both list of dicts and list of strings
                    for entry in data:
                        if isinstance(entry, dict) and 'Regex' in entry:
                            patterns.append(re.compile(entry['Regex']))
                        elif isinstance(entry, str):
                            patterns.append(re.compile(entry))
            else:
                logger.error("Unsupported file format: %s", ignore_file)
                raise ValueError("Unsupported file format for ignore patterns. Only JSON is supported.")
        except FileNotFoundError:
            logger.error("Ignore patterns file not found: %s", ignore_file)
            raise FileNotFoundError(f"Ignore patterns file not found: {ignore_file}")
        except json.JSONDecodeError as e:
            logger.error("Invalid JSON in ignore patterns file: %s (%s)", ignore_file, e)
            raise ValueError(f"Invalid JSON in ignore patterns file: {ignore_file}\n{e}")
        except Exception as e:
>           logger.error("Error loading ignore patterns file: %s (%s)", ignore_file, e)
E           NameError: name 'logger' is not defined

logtriage/parsing.py:44: NameError
______________________ test_pattern_loading_invalid_json _______________________

patterns_file = '/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_invalid_j0/bad.json'

    def load_patterns_from_file(patterns_file):
        import json
        patterns = []
        try:
            if patterns_file.lower().endswith('.json'):
                with open(patterns_file, 'r', encoding='utf-8') as f:
>                   data = json.load(f)

logtriage/parsing.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fp = <_io.TextIOWrapper name='/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_invalid_j0/bad.json' mode='r' encoding='utf-8'>
cls = None, object_hook = None, parse_float = None, parse_int = None
parse_constant = None, object_pairs_hook = None, kw = {}

    def load(fp, *, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``fp`` (a ``.read()``-supporting file-like object containing
        a JSON document) to a Python object.
    
        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).
    
        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.  If ``object_hook``
        is also defined, the ``object_pairs_hook`` takes priority.
    
        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.
        """
>       return loads(fp.read(),
            cls=cls, object_hook=object_hook,
            parse_float=parse_float, parse_int=parse_int,
            parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)

/pkg/python-3.9.7/el7/lib/python3.9/json/__init__.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = '{not: valid json}', cls = None, object_hook = None, parse_float = None
parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}

    def loads(s, *, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance
        containing a JSON document) to a Python object.
    
        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).
    
        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.  If ``object_hook``
        is also defined, the ``object_pairs_hook`` takes priority.
    
        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).
    
        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).
    
        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.
    
        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.
        """
        if isinstance(s, str):
            if s.startswith('\ufeff'):
                raise JSONDecodeError("Unexpected UTF-8 BOM (decode using utf-8-sig)",
                                      s, 0)
        else:
            if not isinstance(s, (bytes, bytearray)):
                raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                                f'not {s.__class__.__name__}')
            s = s.decode(detect_encoding(s), 'surrogatepass')
    
        if (cls is None and object_hook is None and
                parse_int is None and parse_float is None and
                parse_constant is None and object_pairs_hook is None and not kw):
>           return _default_decoder.decode(s)

/pkg/python-3.9.7/el7/lib/python3.9/json/__init__.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f36121bb4f0>
s = '{not: valid json}'
_w = <built-in method match of re.Pattern object at 0x7f361222a6f0>

    def decode(self, s, _w=WHITESPACE.match):
        """Return the Python representation of ``s`` (a ``str`` instance
        containing a JSON document).
    
        """
>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())

/pkg/python-3.9.7/el7/lib/python3.9/json/decoder.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f36121bb4f0>
s = '{not: valid json}', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
>           obj, end = self.scan_once(s, idx)
E           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

/pkg/python-3.9.7/el7/lib/python3.9/json/decoder.py:353: JSONDecodeError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_invalid_j0')

    def test_pattern_loading_invalid_json(tmp_path):
        file = tmp_path / "bad.json"
        file.write_text("{not: valid json}")
        with pytest.raises(ValueError):
>           load_patterns_from_file(str(file))

tests/test_logtriage.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns_file = '/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_invalid_j0/bad.json'

    def load_patterns_from_file(patterns_file):
        import json
        patterns = []
        try:
            if patterns_file.lower().endswith('.json'):
                with open(patterns_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Support both list of dicts and list of (type, regex) tuples
                    for entry in data:
                        if isinstance(entry, dict) and 'Type' in entry and 'Regex' in entry:
                            typ = entry['Type']
                            regex = re.compile(entry['Regex'])
                            patterns.append((typ, regex))
                        elif isinstance(entry, (list, tuple)) and len(entry) == 2:
                            typ, regex_str = entry
                            patterns.append((typ, re.compile(regex_str)))
            else:
                logger.error("Unsupported file format: %s", patterns_file)
                raise ValueError("Unsupported file format for regex patterns. Only JSON is supported.")
        except FileNotFoundError:
            logger.error("Regex patterns file not found: %s", patterns_file)
            raise FileNotFoundError(f"Regex patterns file not found: {patterns_file}")
        except json.JSONDecodeError as e:
>           logger.error("Invalid JSON in regex patterns file: %s (%s)", patterns_file, e)
E           NameError: name 'logger' is not defined

logtriage/parsing.py:71: NameError
________________________ test_pattern_loading_non_json _________________________

patterns_file = '/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_non_json0/notjson.txt'

    def load_patterns_from_file(patterns_file):
        import json
        patterns = []
        try:
            if patterns_file.lower().endswith('.json'):
                with open(patterns_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Support both list of dicts and list of (type, regex) tuples
                    for entry in data:
                        if isinstance(entry, dict) and 'Type' in entry and 'Regex' in entry:
                            typ = entry['Type']
                            regex = re.compile(entry['Regex'])
                            patterns.append((typ, regex))
                        elif isinstance(entry, (list, tuple)) and len(entry) == 2:
                            typ, regex_str = entry
                            patterns.append((typ, re.compile(regex_str)))
            else:
>               logger.error("Unsupported file format: %s", patterns_file)
E               NameError: name 'logger' is not defined

logtriage/parsing.py:65: NameError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_non_json0')

    def test_pattern_loading_non_json(tmp_path):
        file = tmp_path / "notjson.txt"
        file.write_text("not json")
        with pytest.raises(ValueError):
>           load_patterns_from_file(str(file))

tests/test_logtriage.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns_file = '/tmp/pytest-of-i77655/pytest-11/test_pattern_loading_non_json0/notjson.txt'

    def load_patterns_from_file(patterns_file):
        import json
        patterns = []
        try:
            if patterns_file.lower().endswith('.json'):
                with open(patterns_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Support both list of dicts and list of (type, regex) tuples
                    for entry in data:
                        if isinstance(entry, dict) and 'Type' in entry and 'Regex' in entry:
                            typ = entry['Type']
                            regex = re.compile(entry['Regex'])
                            patterns.append((typ, regex))
                        elif isinstance(entry, (list, tuple)) and len(entry) == 2:
                            typ, regex_str = entry
                            patterns.append((typ, re.compile(regex_str)))
            else:
                logger.error("Unsupported file format: %s", patterns_file)
                raise ValueError("Unsupported file format for regex patterns. Only JSON is supported.")
        except FileNotFoundError:
            logger.error("Regex patterns file not found: %s", patterns_file)
            raise FileNotFoundError(f"Regex patterns file not found: {patterns_file}")
        except json.JSONDecodeError as e:
            logger.error("Invalid JSON in regex patterns file: %s (%s)", patterns_file, e)
            raise ValueError(f"Invalid JSON in regex patterns file: {patterns_file}\n{e}")
        except Exception as e:
>           logger.error("Error loading regex patterns file: %s (%s)", patterns_file, e)
E           NameError: name 'logger' is not defined

logtriage/parsing.py:74: NameError
_____________________ test_grouping_different_line_numbers _____________________

    def test_grouping_different_line_numbers():
        row1 = LogRow("1", "tc", "opt", "ERROR", 1, "msg", "msg", "simulate", "file", 10)
        row2 = LogRow("1", "tc", "opt", "ERROR", 1, "msg", "msg", "simulate", "file", 11)
        grouped = group_rows([row1, row2])
>       assert len(grouped) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([LogRow(id='1', testcase='tc', testopt='opt', type='ERROR', count=2, message='msg', orig_message='msg', logtype='simulate', logfilepath='file', linenumber=10)])

tests/test_logtriage.py:153: AssertionError
_____________________________ test_memory_warning ______________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f3610d058e0>

    def test_memory_warning(monkeypatch):
>       from logtriage.parsing import get_memory_usage_mb
E       ImportError: cannot import name 'get_memory_usage_mb' from 'logtriage.parsing' (/home/data/ST012cana0/users/i77655/MUSTANG/branches/VTOOLS/LOG_TRIAGE/logtriage/parsing.py)

tests/test_logtriage.py:205: ImportError
=========================== short test summary info ============================
FAILED tests/test_logtriage.py::test_parse_count_filter_invalid - ValueError:...
FAILED tests/test_logtriage.py::test_group_rows_different_line_numbers - Asse...
FAILED tests/test_logtriage.py::test_load_patterns_invalid_json - NameError: ...
FAILED tests/test_logtriage.py::test_load_ignore_patterns_non_json - NameErro...
FAILED tests/test_logtriage.py::test_pattern_loading_invalid_json - NameError...
FAILED tests/test_logtriage.py::test_pattern_loading_non_json - NameError: na...
FAILED tests/test_logtriage.py::test_grouping_different_line_numbers - Assert...
FAILED tests/test_logtriage.py::test_memory_warning - ImportError: cannot imp...
ERROR tests/test_logtriage.py::test_stop_loading_sets_flag
ERROR tests/test_logtriage.py::test_column_visibility
==================== 8 failed, 27 passed, 2 errors in 0.28s ====================
